import*as THREE from"./three.module.min.js";import{OrbitControls}from"./OrbitControls.js";import TWEEN from"./tween.module.js";const ANGLES_NUM=5,FIGURE_HEIGHT=5.5,FIGURE_RADIUS=5,CURV_COEF=2,LINES_COLOR="#ffffff",SPHERE_COLORS=["#4287f5","#42f598","#4f1aab","#db891d","#e81010","#e81078","#e5ff00","#231e29","#ac99c2","#49522f"],parent=document.querySelector(".canvas__window"),scene=new THREE.Scene,camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,1e3);camera.position.set(-.19058996153741722,-8.456740289133542,1.5396789741867494);const renderer=new THREE.WebGLRenderer({antialias:!0});renderer.setSize(parent.offsetWidth,parent.offsetWidth),renderer.setClearColor(4210509,0),parent.appendChild(renderer.domElement);const controls=new OrbitControls(camera,renderer.domElement);controls.target.set(-.19058996153741756,-4.083425180755162,-.473864393368694),controls.update(),controls.addEventListener("change",()=>{console.log("controls.target"),console.log(controls.target),console.log("camera.position"),console.log(camera.position)});const materialLine=new THREE.LineBasicMaterial({color:"#ffffff"}),polygonCoords1=[];for(let e=0;e<=5;e++){const t=2*e*Math.PI/5;polygonCoords1.push(new THREE.Vector3(1===e||4===e?5*Math.sin(t)*2:5*Math.sin(t),5*-Math.cos(t),0))}const geometry1=(new THREE.BufferGeometry).setFromPoints(polygonCoords1),polygon1=new THREE.Line(geometry1,materialLine);polygon1.rotateX(-Math.PI),scene.add(polygon1);const polygonCoords2=[];for(let e=0;e<=5;e++){const t=2*e*Math.PI/5;polygonCoords2.push(new THREE.Vector3(1===e||4===e?5*Math.sin(t)*2:5*Math.sin(t),5*-Math.cos(t),5.5))}const geometry2=(new THREE.BufferGeometry).setFromPoints(polygonCoords2),polygon2=new THREE.Line(geometry2,materialLine);polygon2.rotateX(-Math.PI),scene.add(polygon2);for(let e=0;e<5;e++){const t=[];for(let n=0;n<10;n++){const n=2*e*Math.PI/5;t.push([new THREE.Vector3(1===e||4===e?5*Math.sin(n)*2:5*Math.sin(n),5*-Math.cos(n),0),new THREE.Vector3(1===e||4===e?5*Math.sin(n)*2:5*Math.sin(n),5*-Math.cos(n),5.5)])}const n=(new THREE.BufferGeometry).setFromPoints(t[e]),o=new THREE.Line(n,materialLine);o.rotateX(-Math.PI),scene.add(o)}for(let e=0;e<10;e++){const t=2*e*Math.PI/5,n=new THREE.SphereGeometry(.2,32,16),o=new THREE.MeshBasicMaterial({color:SPHERE_COLORS[e]}),r=new THREE.Mesh(n,o);e<5?r.position.set(1===e||4===e?5*Math.sin(t)*-Math.PI*.315*2:5*Math.sin(t)*-Math.PI*.31,5*-Math.cos(t)*-Math.PI*.31,0):r.position.set(6===e||9===e?5*Math.sin(t)*-Math.PI*.315*2:5*Math.sin(t)*-Math.PI*.31,5*-Math.cos(t)*-Math.PI*.31,-5.5),scene.add(r)}const animate=()=>{requestAnimationFrame(animate),renderer.render(scene,camera),TWEEN.update()};animate();const raycaster=new THREE.Raycaster,setAnimation=e=>{const t=new THREE.Vector2((e.clientX-renderer.domElement.getBoundingClientRect().left)/renderer.domElement.clientWidth*2-1,-(e.clientY-renderer.domElement.getBoundingClientRect().top)/renderer.domElement.clientHeight*2+1),n=scene.children.filter(e=>e.isMesh);raycaster.setFromCamera(t,camera);const o=raycaster.intersectObjects(n,!0);if(o.length>0){const e=o[0].object;new TWEEN.Tween(e.scale).to({x:2,y:2,z:2},500).easing(TWEEN.Easing.Cubic.Out).onUpdate((function(){e.scale.copy(e.scale)})).start()}};renderer.domElement.addEventListener("mousedown",setAnimation),renderer.domElement.addEventListener("pointermove",setAnimation);